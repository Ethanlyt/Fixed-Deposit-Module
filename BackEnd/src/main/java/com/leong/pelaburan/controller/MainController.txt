package com.leong.pelaburan.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityManager;
import javax.persistence.ParameterMode;
import javax.persistence.StoredProcedureQuery;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.leong.pelaburan.Repository.FixedDepositRepository;
import com.leong.pelaburan.Repository.RegistrationRepository;
import com.leong.pelaburan.Repository.ScheduleRepository;
import com.leong.pelaburan.entity.Fixeddeposit;
import com.leong.pelaburan.entity.Registration;
import com.leong.pelaburan.entity.Schedule;
import com.leong.pelaburan.entity.Fixeddeposit.InvStatus;



@Controller
@RequestMapping(path = "/main")

public class MainController {
    @Autowired
    private FixedDepositRepository fixedDepositRepository;

    @Autowired
    private ScheduleRepository scheduleRepository;

    @Autowired
    private RegistrationRepository registrationRepository;

    @Autowired
    EntityManager em;

    @PostMapping(path = "/add1")
    public @ResponseBody Fixeddeposit add1(@RequestParam String bankRefNum,@RequestParam Double totalPrincipal,@RequestParam Double totalInterest){
        String detials = "Bank Ref Number:" + bankRefNum + " " + String.valueOf(totalPrincipal);
        System.out.println(detials);

        
        Fixeddeposit fd = new Fixeddeposit();
        fd.setBankRefNum(bankRefNum);
        fd.setTotalPrincipal(totalPrincipal);
        fd.setTotalInterest(totalInterest);

        fixedDepositRepository.save(fd);
        
        return fd;
    }

    // @PostMapping(path = "/add2")
    // public @ResponseBody xxx{

    // }

    @PostMapping(path = "/save")
    public @ResponseBody String save(@RequestBody Fixeddeposit fd){
        fd.setStatus(Fixeddeposit.InvStatus.APPROVED);
        fd.getStatus();

        fixedDepositRepository.save(fd);

        // Registration reg = fd.getRegistration();
        // reg.setInvestmentID(fd.getId());
        // registrationRepository.save(reg);


        for (Schedule me : fd.getSchedule()) {
            me.setInvestmentId(fd.getId());
            scheduleRepository.save(me);

        }
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<Fixeddeposit> getAllFixedDeposits(){
        return fixedDepositRepository.findAll();
    }

    @GetMapping(path="/single")
    public @ResponseBody Optional<Fixeddeposit> getSingleFixedDeposits(@RequestParam Long id) {
        return fixedDepositRepository.findById(id);
    }
    
    @GetMapping(path="/combineItems")
    public @ResponseBody String combineItems(@RequestParam Long id) throws JsonProcessingException{
        Fixeddeposit fd = fixedDepositRepository.findOne(id);
        Schedule sch = scheduleRepository.findOne(id);
        
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");

        HashMap<String,Object> map = new HashMap<String,Object>();
        map.put("Schedule:",sch);


        JSONObject addObj = new JSONObject(map);

        HashMap<String,Object> map2 = new HashMap<String,Object>();
        map2.put("k1",addObj);
        map2.put("k2", fd);

        ObjectMapper mapper = new ObjectMapper()
        .registerModule(new JavaTimeModule())
        .setDateFormat(df);

        String jsonString = mapper.writeValueAsString(map2);

        return jsonString;
    }

    @GetMapping(path="/combineItems2")
    public @ResponseBody Iterable<Fixeddeposit> customQuesry(@RequestParam InvStatus status){
        Iterable <Fixeddeposit> fd = fixedDepositRepository.findByStatus(status);
        return fd;
    }
    
    @GetMapping(path="/customeQuery")
    public @ResponseBody String storeProcedure(@RequestParam String status,@RequestParam String id){
        StoredProcedureQuery query = em.createStoredProcedureQuery("investment.sp_getListOfFixedDeposit");

        query.registerStoredProcedureParameter("idInv", String.class, ParameterMode.IN);
        query.setParameter("idInv", id);
        query.registerStoredProcedureParameter("status", String.class, ParameterMode.IN);
        query.setParameter("status", status);
        query.execute();

        @SuppressWarnings("unchecked")
        List<Object[]> list = query.getResultList();

        JsonArray ja = new JsonArray();

        list.stream()   .forEach(r -> {
            JsonObject jo = new JsonObject();
            jo.addProperty("id", String.valueOf(r[0]));
            jo.addProperty("registrationNum", String.valueOf(r[1]));
            jo.addProperty("amount_end", String.valueOf(r[2]));
            jo.addProperty("amount_start", String.valueOf(r[3]));
            jo.addProperty("date_end", String.valueOf(r[4]));
            jo.addProperty("date_start", String.valueOf(r[5]));
            jo.addProperty("investment_id", String.valueOf(r[6]));
            ja.add(jo);
        }); 
        // list.stream().map(r->{
        //     JsonObject jo = new JsonObject();
        //     jo.addProperty("id", String.valueOf(r[0]));
        //     jo.addProperty("registrationNum", String.valueOf(r[1]));
        //     jo.addProperty("amount_end", String.valueOf(r[2]));
        //     jo.addProperty("amount_start",String.valueOf( r[3]));
        //     jo.addProperty("date_end",String.valueOf( r[4]));
        //     jo.addProperty("date_start", String.valueOf(r[5]));
        //     jo.addProperty("investment_id", String.valueOf(r[6]));
            
        //     ja.add(jo);
        //     return jo;
        // }).reduce(new JsonArray(), (jsonArray,jsonObject)->{
        //     return jsonArray;
        // },(jsonArray,otherJsonArray)->{
        //     return jsonArray;
        // }
        // );
        return ja.toString();
    }
}